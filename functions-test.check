#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include "functions.h"

#test getEnvValTest
	char* systemPath;
	systemPath = getenv("PATH");

	fail_unless(strcmp(getEnvVal("PATH"), systemPath) == 0, "getEnvVal did not return same thing as getenv");
	fail_unless(strcmp(getEnvVal("path"), " ") == 0, "path without value did not return a space");

#test stringLengthTest
	int i;
	i = stringLength("test");

	fail_unless(i == 4, "did not return 4 for the word test");
	fail_unless(stringLength("") == 0, "did not return 0 for empty string");

#test stringCopyTest
	char* source;
	char* dest;
	source = "test";
	dest = stringCopy(source);

	fail_unless(strcmp(dest, source) == 0, "strcmp failed between dest and src");

	free(dest);
	dest = stringCopy("test");
	fail_unless(strcmp(dest, source) == 0, "strcmp failed between dest and src");

	free(dest);
	dest = stringCopy("");
	fail_unless(strcmp(dest, "") == 0, "strcmp failed between dest and an empty string");

#test readLineTest
	FILE* fp;
	fp = fopen("test.txt", "w");
	
	/* TEST INPUT 1 */
	char* rltest1;
	char* rltest1_expected;
	rltest1 = "this is a test\n";
	rltest1_expected = "this is a test";
	
	/* TEST INPUT 2 */
	char* rltest2;
	char* rltest2_expected;
	rltest2 = "this is a test\n";
	rltest2_expected = "this is a test";
	
	/* TEST INPUT 3 */
	char* rltest3;
	char* rltest3_expected;
	rltest3 = "this is a test dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\n";
	rltest3_expected = NULL;

	/* TEST INPUT 4 */
	char* rltest4;
	char* rltest4_expected;
	rltest4 = "this is a test\n";
	rltest4_expected = "this is a test";

	fwrite(rltest1, sizeof(char), stringLength(rltest1), fp);
	fwrite(rltest2, sizeof(char), stringLength(rltest2), fp);
	fwrite(rltest3, sizeof(char), stringLength(rltest3), fp);
	fwrite(rltest4, sizeof(char), stringLength(rltest4), fp);
	fclose(fp);
	
	char* line;
	int fileHandle;
	fileHandle = open("test.txt", O_RDONLY);
	fail_unless(fileHandle != -1, "test input file could not be opened");
	
	/* CHECK TEST 1 */
	line = readLine(fileHandle);
	printf("READLINE TEST1 expected value: %s\n", rltest1_expected);
	printf("READLINE TEST1 returned value: %s\n", line);
	fail_unless(strcmp(line, rltest1_expected) == 0, "TEST1 values did not match\n", rltest1_expected, line);
	printf("\n");

	/* CHECK TEST 2 */
	line = readLine(fileHandle);
	printf("READLINE TEST2 expected value: %s\n", rltest2_expected);
	printf("READLINE TEST2 returned value: %s\n\n", line);
	fail_unless(strcmp(line, rltest2_expected) == 0, "TEST2 values did not match\n", rltest2_expected, line);
	printf("\n");

	/* CHECK TEST 3 */
	line = readLine(fileHandle);
	printf("READLINE TEST3 expected value: %s\n", rltest3_expected);
	printf("READLINE TEST3 returned value: %s\n\n", line);
	fail_unless(line == rltest3_expected, "TEST3 values did not match\n", rltest3_expected, line);
	printf("\n");

	/* CHECK TEST 4 */
	line = readLine(fileHandle);
	printf("READLINE TEST4 expected value: %s\n", rltest4_expected);
	printf("READLINE TEST4 returned value: %s\n\n", line);
	fail_unless(strcmp(line, rltest4_expected) == 0, "TEST4 values did not match\n", rltest4_expected, line);
	printf("\n");

	/* CLEAN UP DATA */
	close(fileHandle);
	remove("test.txt");

#test findDollarSignTest
	char* test;
	test = "this is a $test";
	int expected;
	expected = 10;
	int observed;
	observed = findDollarSign(test, 0);

	fail_unless(expected == observed, "dollar sign not found at correct location");

#test isValidFormTest1
	char* test;
	test = "$";
	int expected;
	expected = 0;
	int observed;
	observed = isValidForm(test, 0);

	fail_unless(observed == expected);

#test isValidFormTest2
	char* test;
	test = "$var";
	int expected;
	expected = 1;
	int observed;
	observed = isValidForm(test, 0);

	fail_unless(observed == expected);

#test isValidFormTest3
	char* test;
	test = "$3rf";
	fail_unless(stringLength(test) == 4, "stringLenth invalid\n");
	int expected;
	expected = 0;
	int observed;
	observed = isValidForm(test, 0);

	fail_unless(observed == expected);

#test isValidFormTest4
	char* test;
	test = "$_var";
	int expected;
	expected = 1;
	int observed;
	observed = isValidForm(test, 0);

	fail_unless(observed == expected);

#test isValidFormTest5
	char* test;
	test = "$v=r";
	int expected;
	expected = 0;
	int observed;
	observed = isValidForm(test, 0);

	fail_unless(observed == expected);

#test isValidFormTest6
	char* test;
	test = "$ ";
	int expected;
	expected = 0;
	int observed;
	observed = isValidForm(test, 0);

	fail_unless(observed == expected);

#test getVarLength1
	char* test;
	test = "get the $var length";
	int expected;
	expected = 4;
	int observed;
	observed = getVarLength(test, 8);
	
	fail_unless(expected == observed, "expected did not equal observed");

#test getVarLength2
	char* test;
	test = "get the $var";
	int expected;
	expected = 4;
	int observed;
	observed = getVarLength(test, 8);
	
	fail_unless(expected == observed, "expected did not equal observed");

#test getSubString1
	char* test;
	test = "$var $var";
	char* expected;
	expected = "$var";
	char* observed;
	observed = getSubString(test, 0, 3);

	fail_unless(strcmp(expected, observed) == 0, "expected was not equal to observed");
	
#test getSubString2
	char* test;
	test = "$var $var";
	char* expected;
	expected = "$var";
	char* observed;
	observed = getSubString(test, 5, 8);

	fail_unless(strcmp(expected, observed) == 0, "expected was not equal to observed");
#
#test parseLine1
	setenv("var", "new value", 0);
	printf("test1\n");
	char* test;
	test = "$var $2var";
	char* parsed;
	parsed = parseLine(test);

#test parseLine2
	setenv("var", "new value", 0);
	printf("test2\n");
	char* test;
	test = "$var $var";
	char* parsed;
	parsed = parseLine(test);

#test concatString1
	char* str1;
	char* str2;
	char* expected;
	char* observed;

	str1 = "var ";
	str2 = "var";
	expected = "var var";
	observed = concatString(str1, str2);
	printf("%s\n", observed);

	fail_unless(strcmp(expected,observed) == 0, "not equal strings");

#test concatString2
	char* str1;
	char* str2;
	char* str3;
	char* expected;
	char* observed;
	char* test;

	test = "beginning middle end";
	str1 = getSubString(test, 0, 9);
	str2 = getSubString(test, 10, 15);
	str3 = getSubString(test, 16, 19);
	expected = "beginning middle end";
	char* half;
	half = concatString(str1, str2);
	observed = concatString(half, str3);
	printf("%s\n", observed);

	fail_unless(strcmp(expected,observed) == 0, "not equal strings");
	fail_unless(stringLength(test) == 20, "fail");	










































